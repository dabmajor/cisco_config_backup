#!/usr/bin/python

import paramiko
import time

# must setup login local user on the device (set priv to 15)
username = "user"
password = "cisco"


def main():
	# may want to take this IP address in a different way, hard coded for starter script
	ip_addresses = ("10.252.254.1","10.252.254.20")

	# iterates through a list of ip_addresses, outputs the running config, and saves it to a file
	for ip_address in ip_addresses:
		# initialze the client
		ssh_client = paramiko.SSHClient()
		
		# sends the ssh client and the IP address to initiate session function
		remote_connection = initiate_ssh_session(ssh_client, ip_address)

		# output the entire running config to the screen
		remote_connection.send("show run | no-more")
		
		# wait for a second, then output the remote connection session to screen
		time.sleep(1)
		output = remote_connection.recv(65535)
		
		# be sure to close the client when work is completed
		ssh_client.close
		
		# save the config to a text file
		save_file_name = (str(ip_address) + ".config")
		with open(save_file_name, 'w') as save_file:
			still_looking_for_start_of_config = True
			for line in output:
				if still_looking_for_start_of_config:
					# check this line for start string
					if "show running-config" not in line:
						# do nothing if not found
						continue
					else:
						# force loop to stop looking for the start
						still_looking_for_start_of_config = False
				else:
					# write all remaining lines to the output file
					save_file.write(line)
		
		# close the file
		save_file.close


# initiates ssh client, pulls public key from device, connects to device and return connection object
def initiate_ssh_session(ssh_client, ip_address):
	# accept a public key from switch for use to connect to the switch via SSH
	ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
	ssh_client.connect(hostname=ip_address,username=username,password=password)

	print("Successful connection".format(ip_address))

	# returns the remote shell connection object
	return ssh_client.invoke_shell()


if __name__ == "__main__":
	main()

exit()
